/*--------------------------------------------Gramática DNL------------------------------------------*/


Package dnl ;

Helpers

 all = [0 .. 127] ;
 letra 	= ['a' .. 'z'] ;
 letram = ['A' .. 'Z'] ;
 digito = ['0' .. '9'] ;
 espaco = 32 ;
 quebrade_linha = 10 ;
 tab = 9 ;
 cr = 13 ;
 sinal = '+' | '-' ;
 plus = '+';
 minus = '-';
 star = '*';
 div = '/';
 mod = '%';
 ponto_virgula = ';';
 virgula = ',';
 var='var'; 
 int = 'int';
 char = 'char';
 float = 'float';
 proc = 'proc';
 
Tokens 
 
 identificador = letra (letram | digito |'_')* ;
 operador_relacional = '<'|'>'|'<='|'>='|'='|'<>' ;
 operador_logico_aritmetico = plus | minus | star | div | mod | 'and' | 'or' | 'not' ;
 operador_atribuicao = ':=' ;
 simbolo_especial = ')' | '(' | virgula | ponto_virgula | '{' | '}' ;
 palavra_reservada = 'if' | 'else' | 'while' | 'return' | float | char | 'void' | 'prnt' | int | 'and' | 'or' | 'not' | 'proc' | 'var' ;  
 inteiro_literal = digito+ |sinal digito+ ;
 real_literal = sinal digito* ',' digito+ | sinal digito+ ',' digito* | digito* ',' digito+ | digito+ ',' digito* ;
 real_expoente = real 'E' real ;
 caracter_literal = '"'(digito | letra | letram | '\n' | '\t' | ' ' | '(' | ')' | ',' )*'"' ;

 
 
 
 comentario_linha = '**' all 'quebra_de_linha' ;
 comentario_multilinha = '>>' (all)* '<<' ;
 brancos = (espaco | quebra_de_linha | tab | cr | ' ')+ ;

Ignored Tokens 
 
  brancos,
  comentario_linha,
  comentario_multi_linha;
  
Productions
  
  programa = decl_global*;
  
  decl_global = decl_global
  			  | decl_funcao;
  
  decl_variavel = var lista_idents minus tipo ponto_virgula;
  
  lista_idents = identificador virgula identificador* ;
  
  tipo = int | char | float ;
  
  decl_funcao = proc nome_args minus tipo bloco
  			  | proc nome_args bloco ;
  
  nome_args = (identificador '(' param_formais ')')+ ;
  
  param_formais = identificador '-' tipo (',' identificador '-' tipo)* ;
  				| ?
  
  bloco = '{' lista_comandos '}' ;
  
  lista_comandos = comando*;
  
  comando = decl_variavel
  		  | atribuicao
  		  | iteracao
  		  | decisao
  		  | escrita
  		  | retorno
  		  | bloco
  		  | chamada_func_cmd ;
  
  atribuicao = identificador operadorAtribuicao expressao ponto_virgula ;
  
  iteracao = 'while' '(' expressao ')' comando ;
  
  decisao = 'if' '(' expressao ')' comando 'else' comando
          | 'if' '(' expressao ')' comando ;
  
  escrita = 'prnt' '(' lista_exprs ')' ';' ;
  
  chamada_func_cmd = chamada_func ';' ;
  
  retorno = 'return' expressao ';' ;
  
  chamada_func = (identificador '(' lista_exprs ')')+ ;
  
  lista_exprs = ?
  			  | expressao (',' expressao)* ;
  
  expressao = expressao '+' expressao
  			| expressao '-' expressao
  			| expressao '*' expressao
  			| expressao '/' expressao
  			| expressao '%' expressao
   			| expressao 'and' expressao
   			| expressao 'or' expressao
   			| expressao '=' expressao
   			| expressao '<>' expressao
   			| expressao '<=' expressao
   			| expressao '<' expressao
   			| expressao '>=' expressao
   			| expressao '>' expressao
   			| expr_basica ;
  
  expr_basica = '(' expressao ')'
  			  | 'not' expr_basica
  			  | '-' expr_basica
  			  | inteiro_literal
  			  | caracter_literal
  			  | real_literal
  			  | identificador
  			  |	chamada_func ;
  	 